shiny::runApp()
col2_alt <- ifelse(nsim<120, "#5b80a4","#5b80a4")
runApp()
col2_alt <- ifelse(nsim<120, "#364d63","#5b80a4")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
p_ddm <- res$df %>%
ggplot(aes(x=time,y=V,group=grp,col=as.factor(ref))) +
geom_line(aes(col=factor(ref)), alpha=0.2) + scale_color_manual(values=c(col1,col2))+ theme(legend.position = "none") +
scale_y_continuous(limits = c(0, 4), oob = scales::oob_keep) +
scale_x_continuous(limits = c(0, 600), oob = scales::oob_keep) +
geom_hline(yintercept=bnd[2], color = "black", size=0.7) + #reference boundary
geom_hline(yintercept=bnd[1], color = col2_line,size=0.7) + #boundary
geom_hline(yintercept=start[2], linetype="dashed", color = "black", size=0.7) + #reference start point
geom_hline(yintercept=start[1], linetype="dashed", color = col2_line, size=0.7) + #start point
theme_classic() + theme(axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.title.y=element_blank(),
axis.line.y=element_line(size=0.2),
axis.title.x=element_blank(),
legend.position="none") +
annotate("segment",x=-30,xend=0,y=start[2]-0.15,yend=start[2]-0.15,colour="black", # Add Ter label + bracket
size=0.8,arrow=arrow(ends="both",length = unit(0.15, "cm")))+
annotate("text",x=-15,y=start[2]-0.3,colour="black",label="T[er]",parse=TRUE)+
annotate("text",x=530,y=0,label=paste0("Response B (",round(pctB0,1),"%)")) + # Add response rates text
annotate("text",x=600,y=0,label=paste0("(",round(pctB,1),"%)"),colour=col2_txt) +
annotate("text",x=530,y=4-0.15,label=paste0("Response A (",round(pctA0,0),"%)")) +
annotate("text",x=600,y=4-0.15,label=paste0("(",round(pctA,0),"%)"),colour=col2_txt) +
annotate("text",x=-24,y=bnd[2]+0.2,label="a") + # Add boundary label
annotate("text",x=-20,y=start[2]+.15,label="a[0]*b[0]") + # Add start point label
annotate("segment", x = 0, xend = 50, y = start[1], yend = start[1]+v[1]*0.5, # Add drift rate labels + vectors
colour = col2_alt, size = 0.8, arrow = arrow(length = unit(0.3, "cm"))) +
annotate("text",x=25,y=start[1]+0.15+v[1]*0.25,label="v", parse=TRUE size=5,colour=col2_alt) +
annotate("text",x=25,y=start[2]+0.15+v[2]*0.25,label="v[0]", parse=TRUE size=5,colour=col1_alt) +
annotate("segment", x = 0, xend = 50, y = start[2], yend = start[2]+v[2]*0.5,
colour = col1_alt, size = 0.8, arrow = arrow(length = unit(0.3, "cm"))) +
annotate("segment", x = 520, xend = 600, y = start[2]-0.2, yend = start[2]-0.2, # Add time arrow on x axis
colour = "black", size = 0.8, arrow = arrow(length = unit(0.3, "cm"))) +
annotate("text",x=560,y=start[2]-0.35,label="Time", size=4)
runApp()
p_ddm <- res$df %>%
ggplot(aes(x=time,y=V,group=grp,col=as.factor(ref))) +
geom_line(aes(col=factor(ref)), alpha=0.2) + scale_color_manual(values=c(col1,col2))+ theme(legend.position = "none") +
scale_y_continuous(limits = c(0, 4), oob = scales::oob_keep) +
scale_x_continuous(limits = c(0, 600), oob = scales::oob_keep) +
geom_hline(yintercept=bnd[2], color = "black", size=0.7) + #reference boundary
geom_hline(yintercept=bnd[1], color = col2_line,size=0.7) + #boundary
geom_hline(yintercept=start[2], linetype="dashed", color = "black", size=0.7) + #reference start point
geom_hline(yintercept=start[1], linetype="dashed", color = col2_line, size=0.7) + #start point
theme_classic() + theme(axis.ticks.x=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.title.y=element_blank(),
axis.line.y=element_line(size=0.2),
axis.title.x=element_blank(),
legend.position="none") +
annotate("segment",x=-30,xend=0,y=start[2]-0.15,yend=start[2]-0.15,colour="black", # Add Ter label + bracket
size=0.8,arrow=arrow(ends="both",length = unit(0.15, "cm")))+
annotate("text",x=-15,y=start[2]-0.3,colour="black",label="T[er]",parse=TRUE)+
annotate("text",x=530,y=0,label=paste0("Response B (",round(pctB0,1),"%)")) + # Add response rates text
annotate("text",x=600,y=0,label=paste0("(",round(pctB,1),"%)"),colour=col2_txt) +
annotate("text",x=530,y=4-0.15,label=paste0("Response A (",round(pctA0,0),"%)")) +
annotate("text",x=600,y=4-0.15,label=paste0("(",round(pctA,0),"%)"),colour=col2_txt) +
annotate("text",x=-24,y=bnd[2]+0.2,label="a[0]",parse=TRUE) + # Add boundary label
annotate("text",x=-20,y=start[2]+.15,label="a[0]*b[0]", parse=TRUE) + # Add start point label
annotate("segment", x = 0, xend = 50, y = start[1], yend = start[1]+v[1]*0.5, # Add drift rate labels + vectors
colour = col2_alt, size = 0.8, arrow = arrow(length = unit(0.3, "cm"))) +
annotate("text",x=25,y=start[1]+0.15+v[1]*0.25,label="v", parse=TRUE, size=5,colour=col2_alt) +
annotate("text",x=25,y=start[2]+0.15+v[2]*0.25,label="v[0]", parse=TRUE, size=5,colour=col1_alt) +
annotate("segment", x = 0, xend = 50, y = start[2], yend = start[2]+v[2]*0.5,
colour = col1_alt, size = 0.8, arrow = arrow(length = unit(0.3, "cm"))) +
annotate("segment", x = 520, xend = 600, y = start[2]-0.2, yend = start[2]-0.2, # Add time arrow on x axis
colour = "black", size = 0.8, arrow = arrow(length = unit(0.3, "cm"))) +
annotate("text",x=560,y=start[2]-0.35,label="Time", size=4)
runApp()
2
runApp()
runApp()
a
runApp()
runApp()
?table(iris)
table(iris)
?renderTable
gen_table <- function(v_ref,a_ref,b_ref){
res <- data.table(ID = c("Reference","Input"),
v = c(0.7,v_ref),
a = c(3,a_ref),
b = c(0.5,b_ref))
}
test <- gen_table(0.8,1,0.7)
gen_table <- function(v_ref,a_ref,b_ref){
res <- as.data.table(ID = c("Reference","Input"),
v = c(0.7,v_ref),
a = c(3,a_ref),
b = c(0.5,b_ref))
}
test <- gen_table(0.8,1,0.7)
gen_table <- function(v_ref,a_ref,b_ref){
res <- data.frame(ID = c("Reference","Input"),
v = c(0.7,v_ref),
a = c(3,a_ref),
b = c(0.5,b_ref))
return(res)
}
test <- gen_table(0.8,1,0.7)
test
runApp()
runApp()
runApp()
runApp()
runApp()
p_ddm <- res$df %>%
ggplot(aes(x=time,y=V,group=grp,col=as.factor(ref))) +
geom_line(aes(col=factor(ref)), alpha=0.2) + scale_color_manual(values=c(col1,col2))+ theme(legend.position = "none") +
scale_y_continuous(limits = c(0, 4), oob = scales::oob_keep, breaks=c(bnd[2],start[2]),
labels=c(expression(a[0]),expression(a[0]*b[0]))) +
scale_x_continuous(limits = c(0, 600), oob = scales::oob_keep) +
geom_hline(yintercept=bnd[2], color = "black", size=0.7) + #reference boundary
geom_hline(yintercept=bnd[1], color = col2_line,size=0.7) + #boundary
geom_hline(yintercept=start[2], linetype="dashed", color = "black", size=0.7) + #reference start point
geom_hline(yintercept=start[1], linetype="dashed", color = col2_line, size=0.7) + #start point
theme_classic() + theme(axis.ticks.x=element_blank(),
#axis.ticks.y=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_text(size=14),
axis.title.y=element_blank(),
axis.line.y=element_line(size=0.2),
axis.title.x=element_blank(),
legend.position="none") +
annotate("segment",x=-30,xend=0,y=start[2]-0.15,yend=start[2]-0.15,colour="black", # Add Ter label + bracket
size=0.8,arrow=arrow(ends="both",length = unit(0.15, "cm")))+
annotate("text",x=-15,y=start[2]-0.3,colour="black",label="T[er]",parse=TRUE)+
annotate("text",x=530,y=0,label=paste0("Response B (",round(pctB0,1),"%)")) + # Add response rates text
annotate("text",x=600,y=0,label=paste0("(",round(pctB,1),"%)"),colour=col2_txt) +
annotate("text",x=530,y=4-0.15,label=paste0("Response A (",round(pctA0,0),"%)")) +
annotate("text",x=600,y=4-0.15,label=paste0("(",round(pctA,0),"%)"),colour=col2_txt) +
#annotate("text",x=-24,y=bnd[2]+0.2,label="a[0]",parse=TRUE) + # Add boundary label
#annotate("text",x=-20,y=start[2]+.15,label="a[0]*b[0]", parse=TRUE) + # Add start point label
annotate("segment", x = 0, xend = 50, y = start[1], yend = start[1]+v[1]*0.5, # Add drift rate labels + vectors
colour = col2_alt, size = 0.8, arrow = arrow(length = unit(0.3, "cm"))) +
#annotate("text",x=25,y=start[1]+0.15+v[1]*0.25,label="v", parse=TRUE, size=5,colour=col2_alt) +
annotate("text",x=25,y=start[2]+0.15+v[2]*0.25,label="v[0]", parse=TRUE, size=5,colour=col1_alt) +
annotate("segment", x = 0, xend = 50, y = start[2], yend = start[2]+v[2]*0.5,
colour = col1_alt, size = 0.8, arrow = arrow(length = unit(0.3, "cm"))) +
annotate("segment", x = 520, xend = 600, y = start[2]-0.2, yend = start[2]-0.2, # Add time arrow on x axis
colour = "black", size = 0.8, arrow = arrow(length = unit(0.3, "cm"))) +
annotate("text",x=560,y=start[2]-0.35,label="Time", size=4)
runApp()
?renderTable
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
v
v
v=0.9
a = 4
b = 0.5
data.frame(ID = c("Reference","Input"),
v = c(0.7,v),
a = c(3,a),
b = c(0.5,b),
"P(A)" = c(0,1) )
data.frame(ID = c("Reference","Input"),
v = c(0.7,v),
a = c(3,a),
b = c(0.5,b),
A.Response = c(0,1) )
res <- sim_paths()
res$upper_bnd[res$upper_bnd$ref==1,]
mean(res$upper_bnd[res$upper_bnd$ref==1,])
mean(res$upper_bnd$val[res$upper_bnd$ref==1,])
mean(res$upper_bnd[res$upper_bnd$ref==1,])
res$upper_bnd[res$upper_bnd$ref==1,]
res$upper_bnd[res$upper_bnd$ref==1,1]
meanA <- mean(res$upper_bnd[res$upper_bnd$ref==1,1])
meanA
round(mean(res$upper_bnd[res$upper_bnd$ref==1,1]))
?renderTable
pctA <- nrow(res$upper_bnd[res$upper_bnd$ref==1,])/nsim*100
pctB <- nrow(res$lower_bnd[res$lower_bnd$ref==1,])/nsim*100
pctA0 <- nrow(res$upper_bnd[res$upper_bnd$ref==0,])/nsim*100
pctB0 <- nrow(res$lower_bnd[res$lower_bnd$ref==0,])/nsim*100
medA <- round(mean(res$upper_bnd[res$upper_bnd$ref==1,1]))
medB <- round(mean(res$lower_bnd[res$lower_bnd$ref==1,1]))
medA0 <- round(mean(res$upper_bnd[res$upper_bnd$ref==0,1]))
medB0 <- round(mean(res$lower_bnd[res$lower_bnd$ref==0,1]))
nsim=100
pctA <- nrow(res$upper_bnd[res$upper_bnd$ref==1,])/nsim*100
pctB <- nrow(res$lower_bnd[res$lower_bnd$ref==1,])/nsim*100
pctA0 <- nrow(res$upper_bnd[res$upper_bnd$ref==0,])/nsim*100
pctB0 <- nrow(res$lower_bnd[res$lower_bnd$ref==0,])/nsim*100
medA <- round(mean(res$upper_bnd[res$upper_bnd$ref==1,1]))
medB <- round(mean(res$lower_bnd[res$lower_bnd$ref==1,1]))
medA0 <- round(mean(res$upper_bnd[res$upper_bnd$ref==0,1]))
medB0 <- round(mean(res$lower_bnd[res$lower_bnd$ref==0,1]))
data.frame(ID = c("Reference","Input"),
v = c(0.7,v),
a = c(3,a),
b = c(0.5,b),
Prob_A = c(pctA0,pctA),
Med_RT_A = c(medA0,medA),
Prob_B = c(pctB0,pctB),
Med_RT_B = c(medB0,medB))
gen_table <- function(v,a,b,nsim,res){
pctA <- nrow(res$upper_bnd[res$upper_bnd$ref==1,])/nsim*100
pctB <- nrow(res$lower_bnd[res$lower_bnd$ref==1,])/nsim*100
pctA0 <- nrow(res$upper_bnd[res$upper_bnd$ref==0,])/nsim*100
pctB0 <- nrow(res$lower_bnd[res$lower_bnd$ref==0,])/nsim*100
medA <- round(mean(res$upper_bnd[res$upper_bnd$ref==1,1]))
medB <- round(mean(res$lower_bnd[res$lower_bnd$ref==1,1]))
medA0 <- round(mean(res$upper_bnd[res$upper_bnd$ref==0,1]))
medB0 <- round(mean(res$lower_bnd[res$lower_bnd$ref==0,1]))
res <- data.frame(ID = c("Reference","Input"),
v = c(0.7,v),
a = c(3,a),
b = c(0.5,b),
Prob_A = c(pctA0,pctA),
Med_RT_A = c(medA0,medA),
Prob_B = c(pctB0,pctB),
Med_RT_B = c(medB0,medB))
return(res)
}
gen_table(0.8,5,0.3,nsim,res)
test <- gen_table(0.8,5,0.3,nsim,res) %>%
rename("Prob_A"="P(A)")
test
test <- gen_table(0.8,5,0.3,nsim,res) %>%
rename("P(A)"="Prob_A")
test
runApp()
runApp()
runApp()
runApp()
int(1.23)
round(1.23)
round(141.23)
as.character(round(141.23))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rm(list=ls())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
